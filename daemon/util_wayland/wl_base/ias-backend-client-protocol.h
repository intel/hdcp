/* Generated by wayland-scanner 1.16.0 */

#ifndef IASBACKEND_CLIENT_PROTOCOL_H
#define IASBACKEND_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_iasbackend The iasbackend protocol
 * @section page_ifaces_iasbackend Interfaces
 * - @subpage page_iface_ias_mode - CRTC mode
 * - @subpage page_iface_ias_crtc - CRTC hardware
 * - @subpage page_iface_ias_output - Display output
 * @section page_copyright_iasbackend Copyright
 * <pre>
 *
 * Copyright (c) 2012, Intel Corporation.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * </pre>
 */
struct ias_crtc;
struct ias_mode;
struct ias_output;

/**
 * @page page_iface_ias_mode ias_mode
 * @section page_iface_ias_mode_desc Description
 *
 * Represents a possible width, height, and refresh rate of a CRTC.
 * @section page_iface_ias_mode_api API
 * See @ref iface_ias_mode.
 */
/**
 * @defgroup iface_ias_mode The ias_mode interface
 *
 * Represents a possible width, height, and refresh rate of a CRTC.
 */
extern const struct wl_interface ias_mode_interface;
/**
 * @page page_iface_ias_crtc ias_crtc
 * @section page_iface_ias_crtc_desc Description
 *
 * A CRTC represents a hardware pipe.  Each CRTC has a primary display
 * plane and possibly one or more sprite planes.  During normal
 * operation a CRTC drives exactly one output, but in dualview/stereo
 * setups, it is possible to drive two outputs from a single CRTC.
 * @section page_iface_ias_crtc_api API
 * See @ref iface_ias_crtc.
 */
/**
 * @defgroup iface_ias_crtc The ias_crtc interface
 *
 * A CRTC represents a hardware pipe.  Each CRTC has a primary display
 * plane and possibly one or more sprite planes.  During normal
 * operation a CRTC drives exactly one output, but in dualview/stereo
 * setups, it is possible to drive two outputs from a single CRTC.
 */
extern const struct wl_interface ias_crtc_interface;
/**
 * @page page_iface_ias_output ias_output
 * @section page_iface_ias_output_desc Description
 *
 * An output represents a distinct display (or one "view" of a
 * dualview display).  In normal setups there is a single
 * output per CRTC.  In dualview and stereo 3D setups, there are
 * two outputs per CRTC.
 * @section page_iface_ias_output_api API
 * See @ref iface_ias_output.
 */
/**
 * @defgroup iface_ias_output The ias_output interface
 *
 * An output represents a distinct display (or one "view" of a
 * dualview display).  In normal setups there is a single
 * output per CRTC.  In dualview and stereo 3D setups, there are
 * two outputs per CRTC.
 */
extern const struct wl_interface ias_output_interface;

#define IAS_MODE_ADD 0


/**
 * @ingroup iface_ias_mode
 */
#define IAS_MODE_ADD_SINCE_VERSION 1

/** @ingroup iface_ias_mode */
static inline void
ias_mode_set_user_data(struct ias_mode *ias_mode, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) ias_mode, user_data);
}

/** @ingroup iface_ias_mode */
static inline void *
ias_mode_get_user_data(struct ias_mode *ias_mode)
{
	return wl_proxy_get_user_data((struct wl_proxy *) ias_mode);
}

static inline uint32_t
ias_mode_get_version(struct ias_mode *ias_mode)
{
	return wl_proxy_get_version((struct wl_proxy *) ias_mode);
}

/** @ingroup iface_ias_mode */
static inline void
ias_mode_destroy(struct ias_mode *ias_mode)
{
	wl_proxy_destroy((struct wl_proxy *) ias_mode);
}

/**
 * @ingroup iface_ias_mode
 *
 * Do nothing for now. This is to force the interface to
 * get created.
 */
static inline void
ias_mode_add(struct ias_mode *ias_mode)
{
	wl_proxy_marshal((struct wl_proxy *) ias_mode,
			 IAS_MODE_ADD);
}

/**
 * @ingroup iface_ias_crtc
 * @struct ias_crtc_listener
 */
struct ias_crtc_listener {
	/**
	 * Advertises supported mode
	 *
	 * Advertises a mode that the CRTC supports. Note that in
	 * dualview and stereo setups, this mode is actually a combination
	 * of the modes of the two displays being driven.
	 */
	void (*mode)(void *data,
		     struct ias_crtc *ias_crtc,
		     uint32_t mode_number,
		     uint32_t width,
		     uint32_t height,
		     uint32_t refresh);
	/**
	 * Advertises current gamma
	 *
	 * Advertises the current gamma setting for the CRTC.
	 */
	void (*gamma)(void *data,
		      struct ias_crtc *ias_crtc,
		      uint32_t red,
		      uint32_t green,
		      uint32_t blue);
	/**
	 * Advertises current contrast
	 *
	 * Advertises the current contrast setting for the CRTC.
	 */
	void (*contrast)(void *data,
			 struct ias_crtc *ias_crtc,
			 uint32_t red,
			 uint32_t green,
			 uint32_t blue);
	/**
	 * Advertises current brightness
	 *
	 * Advertises the current brightness setting for the CRTC.
	 */
	void (*brightness)(void *data,
			   struct ias_crtc *ias_crtc,
			   uint32_t red,
			   uint32_t green,
			   uint32_t blue);
	/**
	 * Advertise the connector id
	 *
	 * This informs a client of the connector id that is created by
	 * the DRM.
	 */
	void (*id)(void *data,
		   struct ias_crtc *ias_crtc,
		   uint32_t id);
	/**
	 * Advertise content protection enabled
	 *
	 * This informs a client when content protection has been enabled
	 * by the driver.
	 */
	void (*content_protection_enabled)(void *data,
					   struct ias_crtc *ias_crtc);
};

/**
 * @ingroup iface_ias_crtc
 */
static inline int
ias_crtc_add_listener(struct ias_crtc *ias_crtc,
		      const struct ias_crtc_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) ias_crtc,
				     (void (**)(void)) listener, data);
}

#define IAS_CRTC_SET_MODE 0
#define IAS_CRTC_SET_GAMMA 1
#define IAS_CRTC_SET_CONTRAST 2
#define IAS_CRTC_SET_BRIGHTNESS 3
#define IAS_CRTC_SET_CONTENT_PROTECTION 4

/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_MODE_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_GAMMA_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_CONTRAST_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_BRIGHTNESS_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_ID_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_CONTENT_PROTECTION_ENABLED_SINCE_VERSION 1

/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_SET_MODE_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_SET_GAMMA_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_SET_CONTRAST_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_SET_BRIGHTNESS_SINCE_VERSION 1
/**
 * @ingroup iface_ias_crtc
 */
#define IAS_CRTC_SET_CONTENT_PROTECTION_SINCE_VERSION 1

/** @ingroup iface_ias_crtc */
static inline void
ias_crtc_set_user_data(struct ias_crtc *ias_crtc, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) ias_crtc, user_data);
}

/** @ingroup iface_ias_crtc */
static inline void *
ias_crtc_get_user_data(struct ias_crtc *ias_crtc)
{
	return wl_proxy_get_user_data((struct wl_proxy *) ias_crtc);
}

static inline uint32_t
ias_crtc_get_version(struct ias_crtc *ias_crtc)
{
	return wl_proxy_get_version((struct wl_proxy *) ias_crtc);
}

/** @ingroup iface_ias_crtc */
static inline void
ias_crtc_destroy(struct ias_crtc *ias_crtc)
{
	wl_proxy_destroy((struct wl_proxy *) ias_crtc);
}

/**
 * @ingroup iface_ias_crtc
 *
 * Changes the mode of a CRTC.  Note that in cases where a CRTC is
 * driving multiple displays, this will result in a mode change on
 * both of those displays.
 */
static inline void
ias_crtc_set_mode(struct ias_crtc *ias_crtc, uint32_t mode)
{
	wl_proxy_marshal((struct wl_proxy *) ias_crtc,
			 IAS_CRTC_SET_MODE, mode);
}

/**
 * @ingroup iface_ias_crtc
 *
 * Sets the gamma correction for a CRTC.
 */
static inline void
ias_crtc_set_gamma(struct ias_crtc *ias_crtc, uint32_t red, uint32_t green, uint32_t blue)
{
	wl_proxy_marshal((struct wl_proxy *) ias_crtc,
			 IAS_CRTC_SET_GAMMA, red, green, blue);
}

/**
 * @ingroup iface_ias_crtc
 *
 * Sets the contrast for a CRTC.
 */
static inline void
ias_crtc_set_contrast(struct ias_crtc *ias_crtc, uint32_t red, uint32_t green, uint32_t blue)
{
	wl_proxy_marshal((struct wl_proxy *) ias_crtc,
			 IAS_CRTC_SET_CONTRAST, red, green, blue);
}

/**
 * @ingroup iface_ias_crtc
 *
 * Sets the brightness for a CRTC.
 */
static inline void
ias_crtc_set_brightness(struct ias_crtc *ias_crtc, uint32_t red, uint32_t green, uint32_t blue)
{
	wl_proxy_marshal((struct wl_proxy *) ias_crtc,
			 IAS_CRTC_SET_BRIGHTNESS, red, green, blue);
}

/**
 * @ingroup iface_ias_crtc
 *
 * Sets the content protection property (HDCP) for a CRTC.
 */
static inline void
ias_crtc_set_content_protection(struct ias_crtc *ias_crtc, uint32_t enable)
{
	wl_proxy_marshal((struct wl_proxy *) ias_crtc,
			 IAS_CRTC_SET_CONTENT_PROTECTION, enable);
}

/**
 * @ingroup iface_ias_output
 * @struct ias_output_listener
 */
struct ias_output_listener {
	/**
	 * Output name
	 *
	 * Advertises the name of this output.
	 */
	void (*name)(void *data,
		     struct ias_output *ias_output,
		     const char *name);
};

/**
 * @ingroup iface_ias_output
 */
static inline int
ias_output_add_listener(struct ias_output *ias_output,
			const struct ias_output_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) ias_output,
				     (void (**)(void)) listener, data);
}

#define IAS_OUTPUT_SET_XY 0
#define IAS_OUTPUT_DISABLE 1
#define IAS_OUTPUT_ENABLE 2
#define IAS_OUTPUT_SCALE_TO 3
#define IAS_OUTPUT_SET_FB_TRANSPARENCY 4

/**
 * @ingroup iface_ias_output
 */
#define IAS_OUTPUT_NAME_SINCE_VERSION 1

/**
 * @ingroup iface_ias_output
 */
#define IAS_OUTPUT_SET_XY_SINCE_VERSION 1
/**
 * @ingroup iface_ias_output
 */
#define IAS_OUTPUT_DISABLE_SINCE_VERSION 1
/**
 * @ingroup iface_ias_output
 */
#define IAS_OUTPUT_ENABLE_SINCE_VERSION 1
/**
 * @ingroup iface_ias_output
 */
#define IAS_OUTPUT_SCALE_TO_SINCE_VERSION 1
/**
 * @ingroup iface_ias_output
 */
#define IAS_OUTPUT_SET_FB_TRANSPARENCY_SINCE_VERSION 1

/** @ingroup iface_ias_output */
static inline void
ias_output_set_user_data(struct ias_output *ias_output, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) ias_output, user_data);
}

/** @ingroup iface_ias_output */
static inline void *
ias_output_get_user_data(struct ias_output *ias_output)
{
	return wl_proxy_get_user_data((struct wl_proxy *) ias_output);
}

static inline uint32_t
ias_output_get_version(struct ias_output *ias_output)
{
	return wl_proxy_get_version((struct wl_proxy *) ias_output);
}

/** @ingroup iface_ias_output */
static inline void
ias_output_destroy(struct ias_output *ias_output)
{
	wl_proxy_destroy((struct wl_proxy *) ias_output);
}

/**
 * @ingroup iface_ias_output
 *
 * Sets the location of the output.
 */
static inline void
ias_output_set_xy(struct ias_output *ias_output, uint32_t x, uint32_t y)
{
	wl_proxy_marshal((struct wl_proxy *) ias_output,
			 IAS_OUTPUT_SET_XY, x, y);
}

/**
 * @ingroup iface_ias_output
 *
 * Disables a display output.  Disabling a display will not adjust
 * the compositor coordinates of the other displays managed by the
 * compositor.  If two outputs are being driven off a single CRTC,
 * this will have no effect on the other output.
 */
static inline void
ias_output_disable(struct ias_output *ias_output)
{
	wl_proxy_marshal((struct wl_proxy *) ias_output,
			 IAS_OUTPUT_DISABLE);
}

/**
 * @ingroup iface_ias_output
 *
 * Enables a previously disabled display output.  If two outputs
 * are being driven off a single CRTC, this will have no effect on
 * the other output.
 */
static inline void
ias_output_enable(struct ias_output *ias_output)
{
	wl_proxy_marshal((struct wl_proxy *) ias_output,
			 IAS_OUTPUT_ENABLE);
}

/**
 * @ingroup iface_ias_output
 *
 * Scales an output to cover a smaller or larger area than the
 * output's mode.
 */
static inline void
ias_output_scale_to(struct ias_output *ias_output, uint32_t width, uint32_t height)
{
	wl_proxy_marshal((struct wl_proxy *) ias_output,
			 IAS_OUTPUT_SCALE_TO, width, height);
}

/**
 * @ingroup iface_ias_output
 *
 * Enables or disables transparency in the pixel format for the fb.
 */
static inline void
ias_output_set_fb_transparency(struct ias_output *ias_output, uint32_t enable)
{
	wl_proxy_marshal((struct wl_proxy *) ias_output,
			 IAS_OUTPUT_SET_FB_TRANSPARENCY, enable);
}

#ifdef  __cplusplus
}
#endif

#endif
